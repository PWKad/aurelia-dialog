{"version":3,"sources":["element-selectors.js"],"names":[],"mappings":"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","file":"element-selectors.js","sourceRoot":"/source/","sourcesContent":["import {Container,ViewSlot,transient} from 'aurelia-framework';\nimport {Compiler} from 'gooy/aurelia-compiler';\n\n/**\n * Element Selectors allows a similar functionality like content selectors\n * expect there are no `content` tags used.\n * instead the `select` attribute can be used on any tag and it will be filled with the\n * contents and attributes of the element found in the orginal content.\n */\n@transient()\nexport class ElementSelectors{\n\n  /**\n   * Used to associate this instance with a certain element\n   * @param container\n   */\n  init(container) {\n    this.container = container;\n    this.element = container.get(Element);\n    this.compiler = container.get(Compiler);\n  }\n\n  /**\n   * Apply element selectors\n   * this requires the behavior to have an originalFragment property from which the source elements will be extracted\n   */\n  applySelectors(){\n    let i,l, promise;\n\n    var behavior = this.element.primaryBehavior;\n    var fragment = behavior.originalFragment;\n\n    if(!fragment) throw new Error(\"no originalFragment found for\",this.element);\n\n    var targets = this.element.querySelectorAll(`[select]`);\n    this.unknownTargets = [].slice.call(targets);\n\n    for(i = 0, l = targets.length; i < l; i++){\n      var target = targets[i];\n      var selector = target.getAttribute(\"select\");\n\n      //get the first matching element\n      var source = fragment.querySelector(selector);\n\n      if(!source) continue;\n\n      //apply to target\n      this.copyContentAndAttributes(source, target);\n\n      //remove from unknown targets\n      this.unknownTargets = this.unknownTargets.filter(el=>el!==target);\n    }\n  }\n\n  /**\n   * Create a compose for elements that have a `view` or `view-model` property\n   */\n  createCompositions(){\n    var elements = this.element.querySelectorAll(\"[select]\");\n    //create compose elements if view-model or view is defined in one of the content elements\n    for(var i = 0, l = elements.length; i < l; i++){\n      var el = elements[i];\n\n      let vm = el.getAttribute(\"view-model\");\n      let view = el.getAttribute(\"view\");\n\n      if(vm || view){\n        var compose = document.createElement(\"compose\");\n        if(vm) compose.setAttribute(\"view-model\",vm);\n        if(view) compose.setAttribute(\"view\",view);\n        el.appendChild(compose);\n\n        //this.compiler.compile(compose);\n      }\n    }\n  }\n\n  /**\n   * Remove all compose elements\n   *\n   * @param remove    if true the compose tag itself will be removed otherwise it will just be emptied\n   */\n  destroyCompositions(remove=true){\n    var compositions = this.element.querySelectorAll(\"compose\");\n    for(var i = 0, l = compositions.length; i < l; i++){\n      var compose = compositions[i];\n      compose.innerHTML = \"\";\n      if(remove) compose.parentNode.removeChild(compose);\n    }\n  }\n\n  /**\n   * Copies the contents and all attributes from one node to another\n   *\n   * @param source      source node\n   * @param target    target node\n   */\n  copyContentAndAttributes(source,target){\n    for(var i = 0, l = source.attributes.length; i < l; i++){\n      var attr = source.attributes[i];\n      if(attr===\"select\") continue;\n      target.setAttribute(attr.nodeName,attr.nodeValue);\n    }\n    target.textContent = source.textContent;\n    target.innerHTML = source.innerHTML;\n  }\n}\n"]}